% NGF - Static stability (Tim Attwell, 20.05.19)
% Takes aircraft design properties and finds the static stability and
% static margin of the design.
%% Housekeeping
close all
clear
clc

%% Aircraft geometric properties, values, and constants.

%Aircraft sizing
L_f = 38.815 ;
W_f = 7.1 ;
D_f = W_f ; %Depth of fuselage
V_f = 2*pi*(W_f/2)^2 ; 

%Wing Properties - airfoil
t_c_w = 0.12 ;
a_sect_W = 6.5541 ;
alf_0_w = -2.5 ;
C_L_max = 1.7 ;
a_w = 4.5350 ;
a_w_0 = 3.419 ;

%Wing Properties - Geometry
S_w = 202 ;
lambda_w = 0.2 ;  % Taper ratio
AR_w = 7 ;
b_w = 37.58 ;
c_root_w = 8.7287 ;
c_tip_w = 2.0076 ;
cbar = 6.069 ;
ycbar_w = 7.434 ; %?
LAMBDA_14_w = 24.5 ; % Sweep
GAMMA_w = -3 ;
eps1_w = 3 ; % twist
i_w = -3 ;

%V-tailplane - Airfoil
t_c_h = 0.10;
a_sect_h = 6.366 ;
alf_0_h = 0 ;
a_h = 2.92 ;
a_h_0 = 2.52 ; 

%V-tailplane - Geometry
%x_v =  ;
%z_v =  ;
S_v = 70 ;
eps1_v = 0.5 ;
AR_v = 3.5 ;
LAMBDA_v = 41 ;
GAMMA_v = 42 ;
%iH =  ;

%% Guesses
x_cg_f = 0.40 ;
x_cg = x_cg_f * L_f ;
xbar_cg = x_cg / cbar ;

x_w_f = 0.45 ;
x_w = x_w_f * L_f ;
xbar_w = x_w / cbar ;

z_w = W_f / 2 ;

x_v_f = 0.95 ;
x_v = x_v_f * L_f ;
xbar_v = x_v / cbar ;

z_v = z_w + 9.1035 ;

%{
L_f = 20 ;      % Fuselage length(m)
w_f = 5 ;     % Fuselage max width(m)
S_w = 59.65792 ;      % Wing area(m^2)
S_v = 10 ;        % V-tail area
cbar = 5 ;    % Mean aerodynamic chord(m)
AR = 2.5 ;         % Aspect ratio
LAMBDA_14 = 5 ;  % Sweep at quater chord (deg)
lambda = 5 ;     % Taper ratio
h_h = 5 ;        % Height of horizontal stabalizer ABOVE the wing(m)
l_h = 5 ;        % Length of horizontal stabalizer BEHIND the wing(m)
b = 5 ;          % Wing span(m)
K_f = 2.8 ;     % Fuselage pitching moment constant found from NACA TR-711
C_m0_w = 5 ;     % Incompressible airfoil zero lift pitching moment 
eps1 = 5 ;       % Wing twist (deg)
a_w = 5 ;        % Wing lift curve slope
a_w_0 = 5 ;        % Wing zero lift curve slope
a_h = 5 ;        % Tailplane lift curve slope
x_ac_w = 5 ;     % Aerodynamic centre point of the wing
x_ac_v = 5 ;     % Aerodynamic centre point of the V-tail

x_cg = 5 ;       % Centre of gravity x-position

C_m0_airf_0 = 5 ;    




M = 0.85 ;       % Design Mach number
x_c4 = 5 ;       % Quater chord x-position
GAMMA = 5 ;      % Tail dihedral
%}
M = 0.85 ;
%% Longitudinal Static Stability

% Pitching moment generated by the fuselage empirically given by:
k = polyfit([10,20,30,40,50,60],[0.08,0.3,0.6,1,1.65,2.8],2) ;
K_f = polyval(k, (100*x_w/L_f)) ; %constant from graph in notes 
C_Mf = K_f * (L_f) * (W_f^2) / (cbar * S_w) ;

% Tail efficiency accounts for difference between dynamic pressure at the
% tail and that at freestream
eta_v = 0.93 ;     % Efficiency of v section of tail is increased

% Downwash effect on the horizontal stabalizer
% alf_h = alf - eps
% dalf_h / dalf = 1 - deps / dalf = de_da

% deps / dalf given empirically by:
K_A = (1 / AR_w) - (1 / (1 + (AR_w^1.7))) ;
K_lambda = (10 - 3 * lambda_w) / 7 ;

h_v = z_v - z_w ;
l_v = x_v - x_w ;
K_h = (1 - abs(h_v/b_w)) / ((2 * l_v / b_w)^(1/3)) ;

de_da = 4.44 * ((K_A * K_lambda * K_h * ((cosd(LAMBDA_14_w))^(1/2)))^(1.19)) * (a_w / a_w_0) ;

%{
% Aerodynamic centre estimation
if M >= 1.1
    dx_ac = 0.112 - 0.004 * M ;          % Supersonic x_ac
elseif M < 1 && M > 0.4
    dx_ac = 0.26 * power(M - 0.4, 2.5) ; % Subsonic x_ac
end
x_ac = x_c4 + dx_ac * sqrt(S_w) ;
%}

% 'Rotated' lift curve slope
a_v = a_h * power(cosd(GAMMA_v),2) ;

% Bringing everything together:
dCmcgdalf = -a_w * ((x_w - x_cg)/cbar) + C_Mf ...                              % Contribution of main wing
    - (eta_v * a_v * (1 - de_da) * (S_v / S_w) * ((x_v - x_cg)/cbar)) ;     % Contribution of 'V' section


if dCmcgdalf > 0
    disp("The aircraft is unstable in pitch (dC_m/d_alf > 0)")
elseif dCmcgdalf == 0
    disp("The aircraft is neutrally stable in pitch(dC_m/d_alf = 0)")
elseif dCmcgdalf < 0
    disp("The aircraft is stable in pitch(dC_m/d_alf < 0)")
end
disp(dCmcgdalf)

%% Neutral point and static margin

% Neutral point calculation
x_np = cbar * ((a_w * (x_w / cbar)) - C_Mf ... 
    + (eta_v * a_v * (1 - de_da) * (S_v / S_w) * (x_v / cbar))) ...
    / (a_w ...
    + (eta_v * a_v * (1 - de_da) * (S_v / S_w))) ;

% Engine off static margin 
SMoff = (x_np - x_cg) / cbar ;

if SMoff > 0.20
    disp("The static margin is way too high! (SM>20)")
elseif SMoff <= 0.20 && SMoff > 0.07
    disp("The static margin is high, even for a transport! (7<SM<20)")
elseif SMoff <= 0.07 && SMoff > 0.04
    disp("The static margin is that of a transport! (4<SM<7)")
elseif SMoff <= 0.04 && SMoff > 0
    disp("The static margin is that of an early fighter! (0<SM<4)")
elseif SMoff <= 0 && SMoff > -0.15
    disp("The static margin is that of a modern fighter! (-15<SM<0)")
elseif SMoff <= -0.15
    disp("The static margin is way too low! (SM<-15)")
end
disp(SMoff)

% Rough engine-on calculation based on past experience
SMon = SMoff - 0.02 ;
disp(SMon)

%% Trim Analysis

% Wing zero lif pirching moment empirical calculation:
C_M0_w = (C_m0_airf_0 * ((AR * cosd(LAMBDA_14) * cosd(LAMBDA_14)) / (AR + 2 * cosd(LAMBDA_14))) - 0.01 * eps1) * (a_w / a_w_0) ;

% Thrust effects:
% In steady level flight:
q = 5 ;
C_D = 5 ;

T = q * S_w * C_D ;
Z_t = 5 ;           % Distance between vertical cg and thrustline (+ve if thrustline under cg)

% Lift of lifting surfaces:
alf = (-15:3:15) ;
i_h = [-3:2:15] ; 
C_L_w = a_w .* (alf + i_w - alf_0_w) ;
C_L_h = a_h .* ((alf + i_w - alf_0_w) .* (1 - de_da) + (i_h - i_w) - (alf_0_h - alf_0_w)) ;


% Total lift and pitching moments about cg for a clean a/c
C_M_cg = (-C_L_w * (x_ac_w - x_cg) / cbar) + C_M0_w + (C_Mf * alf) - (eta_h * C_l_h * (S_h / S_w) * ((x_ac_h - x_cg) / cbar) + ((Z_t * T) / (q * S_w * cbar))) ;
C_L = C_L_w + (eta_h * (S_h / S_w) * C_L_h) ;

% Design point
C_L_des = W_des / (q_des * S_w) ; 
C_M_cg_des = 0 ;

i_h = [-3:2:15] ; 

figure(1)
hold on; 
grid on;
for ii = 0 : 9
    plot(CL(ii), C_M_cd(ii))


end

%% Lateral stability


C_n_beta_w = C_L^2 * ((1 / (4 * pi * AR)) - ...
    (tand(LAMBDA_14) / (pi * AR * (AR + 4 * cosd(LAMBDA_14)))) * ...
    (cosd(LAMBDA_14) - (AR / 2) - (AR^2 / (8 * cosd(LAMBDA_14))) + ...
    (6 * (x_ac_w - x_cg) * sind(LAMBDA_14) / (AR * cbar)))) ;

C_n_beta_v = -a_h * power(sind(GAMMA), 2) ;

C_n_beta_fus = -1.3 * V_f * (D_f / W_f) / (S_w * b) ;

BvBetav = 0.724 + ((3.06 * (S_vs / S_w)) / (1 + cosd(LAMBDA_14))) - ...
    0.4 * (Z_wf / D_f) + (0.009 * AR) ; 


ClbetawCL = 5 ;

C_l_beta_gam = (-a * gam / 4) * ((2 * (1 + 2*lambda)) / (3 * (1 + lambda))) ;

C_beta_wf = -1.2 * ((sqrt(AR) * Z_wf * (D_f + W_f)) / (b^2)) ;

C_l_beta_w = ClbetawCL * C_L + C_l_beta_gam + C_l_beta_wf ;

C_l_beta_v = -C_F_beta_v * BvBetav * (S_v / S_w) * Z_v / cbar ;


C_n_beta = C_n_beta_w + C_n_beta_fus + C_n_beta_v ;

C_l_beta = C_l_beta_w + C_l_beta_v ;


















